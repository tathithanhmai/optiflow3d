int rgfl;


func real poiseuillex(real xa,real ya,real xb,real yb,real xx,real yy) {
  real alpha = 1;
  real ymin = min(ya, yb);
  real ymax = max(ya, yb);
  real xmin = min(xa, xb);
  real xmax = max(xa, xb);
  real s = (xa-xx)/(xa-xb);
  //  cout << xmin << endl;
  return (yy>ymin)*(yy<ymax)*(xx>xmin)*(xx<xmax)*alpha*s*(1-s)*(-(yb-ya));
}


func real poiseuilley(real xa,real ya,real xb,real yb,real xx,real yy) {
  real alpha = 1;
  real ymin = min(ya, yb);
  real ymax = max(ya, yb);
  real xmin = min(xa, xb);
  real xmax = max(xa, xb);
  real s = (ya-yy)/(ya-yb);
  return (yy>ymin)*(yy<ymax)*(xx>xmin)*(xx<xmax)*alpha*s*(1-s)*((xb-xa));
}

// [30/03/2016] Vérifié
macro EPS(u, v) [dx(u), 1./2*(dx(v)+dy(u)), 1./2*(dx(v)+dy(u)), dy(v)] // EOM
macro GRAD(u, v) [dx(u), dy(u), dx(v), dy(v)] // EOM
macro UgradV(u1,u2,v1,v2) [ [u1,u2]'*[dx(v1),dy(v1)] , [u1,u2]'*[dx(v2),dy(v2)] ]// 
macro div(u, v) (dx(u)+dy(v)) // EOM
//Correction 15/06/2016
macro SIG(u, v) [2*muela*dx(u) + laela*div(u,v), muela*(dx(v)+dy(u)), muela*(dx(v)+dy(u)), 2*muela*dy(v) + laela*div(u,v)] //EOM     
macro MN(M) [M[0]*N.x+M[1]*N.y, M[2]*N.x+M[3]*N.y] //EOM
macro tr(u) u' //EOM /* ' */
macro vol(Th) int2d(Th)(1.) //EOM
macro perim(Th) int1d(Th)(1.) //EOM
macro contr(Th) (beta*int2d(Th)(1.)+(1.-beta)*int1d(Th)(1.)) //EOM
macro dotN(u1,u2) (u1*N.x+u2*N.y) //EOM
macro dotT(u1,u2) (u1*N.y-u2*N.x) //EOM
macro IJ() (-2*delta*mu*tr(EPS(ux,uy))*EPS(ux,uy) + 2*mu*tr(EPS(ux,uy))*EPS(vx,vy)) //EOM

macro J() (2*delta*mu*int2d(Th)(tr(EPS(ux,uy))*EPS(ux,uy)) + ((1.-delta)/2)*int1d(Th,2)((ux-uxx)^2+(uy-uyy)^2)) //EOM

macro EL() (J/J0 + l*(contr(Th) - ctarget)/c0 + b/2 * ((contr(Th) - ctarget)^2)/(c0^2)) //EOM

macro gradC() (beta*1+(1.-beta)*kappa) //EOM
macro gradCG() (y) //EOM
macro gradDF() (IJ/J0 + l*gradC/c0 + b*gradC*(contr(Th)-ctarget)/(c0^2)) //EOM

macro grad(u) [dx(u), dy(u)] // EOM
macro gradT(u) (grad(u) - grad(u)'*[N.x, N.y]*[N.x, N.y]) // EOM


macro savef() {
      wx[] = ux[];
      wy[] = uy[];
      q[] = p[];
} //EOM

macro restoref() {
      ux = ux;
      uy = uy;
      p = p;
      ux[] = wx[];
      uy[] = wy[];
      p[] = q[];
} //EOM

macro adapt(Th) {
problem lap(phix,phiy) =
  int2d(Th)(tr(grad(phix))*grad(phiy) + phix*phiy)
  +on(3,phix=1);

 lap;
 plot(Th,phix, wait=1);
 phix = abs(phix);
 Th = adaptmesh(Th, phix);
} //EOM
